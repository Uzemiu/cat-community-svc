// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: rpc/cat_community.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CatCommunityClient is the client API for CatCommunity service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CatCommunityClient interface {
	// 根据ID查询猫咪信息
	GetDetail(ctx context.Context, in *CatDetailReq, opts ...grpc.CallOption) (*CatDetailResp, error)
	// 查询猫咪信息
	QueryCat(ctx context.Context, in *QueryCatReq, opts ...grpc.CallOption) (*QueryCatResp, error)
	// 上传或更新猫咪信息
	UploadCat(ctx context.Context, in *UploadCatReq, opts ...grpc.CallOption) (*UploadCatResp, error)
}

type catCommunityClient struct {
	cc grpc.ClientConnInterface
}

func NewCatCommunityClient(cc grpc.ClientConnInterface) CatCommunityClient {
	return &catCommunityClient{cc}
}

func (c *catCommunityClient) GetDetail(ctx context.Context, in *CatDetailReq, opts ...grpc.CallOption) (*CatDetailResp, error) {
	out := new(CatDetailResp)
	err := c.cc.Invoke(ctx, "/cat.CatCommunity/getDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catCommunityClient) QueryCat(ctx context.Context, in *QueryCatReq, opts ...grpc.CallOption) (*QueryCatResp, error) {
	out := new(QueryCatResp)
	err := c.cc.Invoke(ctx, "/cat.CatCommunity/queryCat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catCommunityClient) UploadCat(ctx context.Context, in *UploadCatReq, opts ...grpc.CallOption) (*UploadCatResp, error) {
	out := new(UploadCatResp)
	err := c.cc.Invoke(ctx, "/cat.CatCommunity/uploadCat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CatCommunityServer is the server API for CatCommunity service.
// All implementations must embed UnimplementedCatCommunityServer
// for forward compatibility
type CatCommunityServer interface {
	// 根据ID查询猫咪信息
	GetDetail(context.Context, *CatDetailReq) (*CatDetailResp, error)
	// 查询猫咪信息
	QueryCat(context.Context, *QueryCatReq) (*QueryCatResp, error)
	// 上传或更新猫咪信息
	UploadCat(context.Context, *UploadCatReq) (*UploadCatResp, error)
	mustEmbedUnimplementedCatCommunityServer()
}

// UnimplementedCatCommunityServer must be embedded to have forward compatible implementations.
type UnimplementedCatCommunityServer struct {
}

func (UnimplementedCatCommunityServer) GetDetail(context.Context, *CatDetailReq) (*CatDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetail not implemented")
}
func (UnimplementedCatCommunityServer) QueryCat(context.Context, *QueryCatReq) (*QueryCatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCat not implemented")
}
func (UnimplementedCatCommunityServer) UploadCat(context.Context, *UploadCatReq) (*UploadCatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadCat not implemented")
}
func (UnimplementedCatCommunityServer) mustEmbedUnimplementedCatCommunityServer() {}

// UnsafeCatCommunityServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CatCommunityServer will
// result in compilation errors.
type UnsafeCatCommunityServer interface {
	mustEmbedUnimplementedCatCommunityServer()
}

func RegisterCatCommunityServer(s grpc.ServiceRegistrar, srv CatCommunityServer) {
	s.RegisterService(&CatCommunity_ServiceDesc, srv)
}

func _CatCommunity_GetDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CatDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatCommunityServer).GetDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cat.CatCommunity/getDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatCommunityServer).GetDetail(ctx, req.(*CatDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatCommunity_QueryCat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatCommunityServer).QueryCat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cat.CatCommunity/queryCat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatCommunityServer).QueryCat(ctx, req.(*QueryCatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatCommunity_UploadCat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadCatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatCommunityServer).UploadCat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cat.CatCommunity/uploadCat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatCommunityServer).UploadCat(ctx, req.(*UploadCatReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CatCommunity_ServiceDesc is the grpc.ServiceDesc for CatCommunity service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CatCommunity_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cat.CatCommunity",
	HandlerType: (*CatCommunityServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getDetail",
			Handler:    _CatCommunity_GetDetail_Handler,
		},
		{
			MethodName: "queryCat",
			Handler:    _CatCommunity_QueryCat_Handler,
		},
		{
			MethodName: "uploadCat",
			Handler:    _CatCommunity_UploadCat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/cat_community.proto",
}
